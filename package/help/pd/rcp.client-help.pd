#N canvas 36 43 765 671 12;
#X obj 67 459 rcp.client;
#X obj 67 170 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X msg 101 220 close;
#X floatatom 236 276 5 0 0 0 - - - 0;
#X obj 144 274 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X text 344 556 id <group-label-list> <id>;
#X text 344 516 min <group-label-list> <min>;
#X text 344 536 max <group-label-list> <max>;
#X text 344 576 value <group-label-list> <value>;
#X text 344 596 type <group-label-list> <type>;
#X msg 304 393 mybang;
#X msg 268 357 mysymbol bla;
#X msg 269 332 mysymbol a\ string\ test\ bla;
#X floatatom 89 529 5 0 0 0 - - - 0;
#X text 132 528 parameter id;
#X msg 91 198 open ws://localhost:10000;
#X obj 111 511 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X text 132 509 connected;
#X msg 144 298 toggle \$1;
#X text 152 219 close connection;
#X msg 236 298 sensor1 \$1;
#X obj 134 485 print client_info;
#X text 14 9 RabbitControl for Pd;
#X obj 47 49 rcp.client;
#X text 136 49 - rcp client;
#X text 45 629 see also:;
#X obj 123 628 rcp.server;
#X text 284 197 connect to a rcp server;
#X text 47 83 Rabbitcontrol allows you to control values (parameters) on a remote system in an easy way. The remote system (rcp-server) exposes parameters which are received and controlled by rcp-clients.;
#N canvas 157 94 380 288 parameter-info 0;
#X msg 137 108 info mybang;
#X msg 148 132 readonly mybang;
#X msg 55 70 info sensor;
#X text 34 20 get information about parameters;
#X obj 55 215 s rcp_client;
#X connect 0 0 4 0;
#X connect 1 0 4 0;
#X connect 2 0 4 0;
#X restore 549 208 pd parameter-info;
#X text 344 496 info <group-label-list> <value> <min> <max> <id> <type>;
#X text 328 475 output:;
#X text 121 249 set values;
#X obj 470 440 r rcp_client;
#X obj 67 558 print rcp_client;
#N canvas 70 88 534 485 raw 0;
#X obj 52 215 rcp.client -raw;
#X floatatom 77 401 5 0 0 0 - - - 0;
#X text 120 400 parameter id;
#X obj 103 379 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X text 124 377 connected;
#X obj 128 353 print client_info;
#X obj 52 426 print rcp_client;
#N canvas 99 123 471 333 udp_send_receive 0;
#X obj 164 102 netsend -u -b;
#X obj 24 43 list prepend send;
#X obj 24 69 list trim;
#X obj 164 128 sel 1;
#X msg 117 164 send 1 0;
#X obj 24 16 inlet;
#X obj 252 279 outlet;
#X text 262 257 data received;
#X obj 378 16 inlet;
#X text 24 195 In order to start communicating with a server send a version-request: 1 0, f 28;
#X connect 0 0 3 0;
#X connect 0 1 6 0;
#X connect 1 0 2 0;
#X connect 2 0 0 0;
#X connect 3 0 4 0;
#X connect 4 0 0 0;
#X connect 5 0 1 0;
#X connect 8 0 0 0;
#X restore 202 215 pd udp_send_receive;
#X msg 346 190 disconnect;
#X msg 52 161 sensor \$1;
#X floatatom 52 134 5 0 0 0 - - - 0;
#X text 43 22 Usind the -raw flag allows you to handle network traffic yourself. Another input and output are created for raw data-input and data-output. Feed the client with a list of binary data and send the data rcp.server provides on the data-output port.;
#X msg 332 164 connect localhost 12002;
#X connect 0 0 6 0;
#X connect 0 1 1 0;
#X connect 0 2 3 0;
#X connect 0 3 5 0;
#X connect 0 4 7 0;
#X connect 7 0 0 1;
#X connect 8 0 7 1;
#X connect 9 0 0 0;
#X connect 10 0 9 0;
#X connect 12 0 7 1;
#X restore 549 248 pd raw;
#X text 514 249 -->;
#X text 514 209 -->;
#X connect 0 0 34 0;
#X connect 0 1 13 0;
#X connect 0 2 16 0;
#X connect 0 3 21 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 20 0;
#X connect 4 0 18 0;
#X connect 10 0 0 0;
#X connect 11 0 0 0;
#X connect 12 0 0 0;
#X connect 15 0 0 0;
#X connect 18 0 0 0;
#X connect 20 0 0 0;
#X connect 33 0 0 0;
