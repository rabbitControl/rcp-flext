#N canvas 18 32 790 671 12;
#X obj 50 468 rcp.server;
#X obj 172 453 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X floatatom 106 327 5 0 0 0 - - - 0;
#X floatatom 72 543 5 0 0 0 - - - 0;
#X text 113 543 parameter id;
#X floatatom 94 521 5 0 0 0 - - - 0;
#X text 134 521 number of connected clients;
#X msg 74 216 getport;
#X text 122 380 remove parameter;
#N canvas 29 44 872 550 parameter-in-groups 0;
#X msg 87 129 expose i group1 int1;
#X msg 106 157 expose i group2 int2;
#X floatatom 316 225 5 0 0 0 - - - 0;
#X msg 317 390 remove group1;
#X msg 649 454 info group1 int1;
#X floatatom 152 225 5 0 0 0 - - - 0;
#X msg 152 247 group1 int1 \$1;
#X msg 67 101 expose i group1 g2 int1;
#X msg 650 426 info group1 g2 int1;
#X msg 296 342 remove group1 g2 int1;
#X msg 316 247 group1 g2 int1 \$1;
#X obj 67 472 s server;
#X text 65 75 expose parameter in group;
#X text 148 200 setting value;
#X text 293 320 remove a parameter in a group;
#X text 315 369 remove a group including all parameters;
#X text 647 402 parameter information;
#X connect 0 0 11 0;
#X connect 1 0 11 0;
#X connect 2 0 10 0;
#X connect 3 0 11 0;
#X connect 4 0 11 0;
#X connect 5 0 6 0;
#X connect 6 0 11 0;
#X connect 7 0 11 0;
#X connect 8 0 11 0;
#X connect 9 0 11 0;
#X connect 10 0 11 0;
#X restore 488 249 pd parameter-in-groups;
#N canvas 116 93 597 766 min-max-and-info 0;
#X msg 81 255 setmin group1 g2 int1 0;
#X msg 93 280 setmax group1 g2 int1 100;
#X msg 125 308 min group1 g2 int1;
#X msg 125 332 max group1 g2 int1;
#X msg 77 548 value group1 g2 int1;
#X msg 100 600 id group1 g2 int1;
#X msg 123 653 type group1 g2 int1;
#X obj 78 428 s server;
#X msg 78 99 setmin sensor1 0;
#X msg 93 122 setmax sensor1 1;
#X text 77 71 set min and max;
#X text 271 114 get min and max;
#X msg 273 141 max sensor1;
#X msg 372 141 min sensor1;
#X text 78 229 groups;
#X obj 78 159 s server;
#X obj 77 693 s server;
#X text 74 526 get value;
#X text 73 488 get inforamtion about parameters;
#X text 100 579 get id;
#X text 123 632 get type;
#X connect 0 0 7 0;
#X connect 1 0 7 0;
#X connect 2 0 7 0;
#X connect 3 0 7 0;
#X connect 4 0 16 0;
#X connect 5 0 16 0;
#X connect 6 0 16 0;
#X connect 8 0 15 0;
#X connect 9 0 15 0;
#X connect 12 0 15 0;
#X connect 13 0 15 0;
#X restore 487 339 pd min-max-and-info;
#X obj 386 569 pdcontrol;
#X msg 386 526 browse http://client.rabbitcontrol.cc/#127.0.0.1:10000;
#X msg 505 550 browse http://client.rabbitcontrol.cc;
#N canvas 48 85 596 694 rabbithole 0;
#X text 43 22 Rabbithole allows you to access your parameters over the internet.;
#X obj 46 94 pdcontrol;
#X msg 46 69 browse https://rabbithole.rabbitcontrol.cc;
#X obj 46 621 pdcontrol;
#X msg 46 572 browse https://rabbithole.rabbitcontrol.cc/client/index.html#pd_test;
#X text 74 355 Be aware that public tunnels are limited and for testing purpose only. You can register a user-account and get access to private tunnels.;
#X text 45 471 Next \, open rabbithole.rabbitcontrol.cc in your browser \, set the public tunnel name to pd_test and click "Open Webclient". The client should open and you should see the exposed parameters.;
#X text 45 551 Open the client directly:;
#X msg 46 222 expose f sensor2;
#X msg 59 244 expose i integer2;
#X text 43 195 expose some parameters;
#X obj 46 410 print from_rabbithole;
#X text 44 154 Create a rcp.server with a rabbithole endpoint to a public tunnel (or use private tunnel with an rabbithole account):;
#X obj 46 305 rcp.server @rabbithole wss://rabbithole.rabbitcontrol.cc/public/rcpserver/connect?key=pd_test;
#X msg 113 275 listen 20000;
#X text 213 275 start server on port 20000;
#X connect 2 0 1 0;
#X connect 4 0 3 0;
#X connect 8 0 13 0;
#X connect 9 0 13 0;
#X connect 13 0 11 0;
#X connect 14 0 13 0;
#X restore 487 439 pd rabbithole;
#N canvas 154 100 479 370 parameter-info 0;
#X msg 97 148 value group1 g2 int1;
#X msg 120 200 id group1 g2 int1;
#X msg 143 253 type group1 g2 int1;
#X obj 47 293 s server;
#X text 94 126 get value;
#X text 120 179 get id;
#X text 143 232 get type;
#X msg 47 83 info sensor1;
#X text 43 28 get information about parameters;
#X text 43 50 output: info <groups-label-list> <value> <id> <type>;
#X connect 0 0 3 0;
#X connect 1 0 3 0;
#X connect 2 0 3 0;
#X connect 7 0 3 0;
#X restore 487 309 pd parameter-info;
#X obj 86 446 r server;
#X text 455 249 -->;
#X text 455 279 -->;
#X text 455 339 -->;
#X text 455 439 -->;
#X msg 50 164 listen 10000;
#X msg 60 187 listen 0;
#X text 131 188 (0 or negative number to close);
#X text 136 216 get port currently listening to;
#X text 149 165 listen message to set or change port;
#N canvas 85 102 983 362 parameter-options 0;
#X msg 71 97 readonly sensor1;
#X obj 56 138 s server;
#X text 53 38 readonly;
#X msg 56 73 setreadonly sensor1 1;
#X msg 301 117 order sensor1;
#X obj 290 158 s server;
#X text 287 38 order;
#X msg 290 93 setorder sensor1 \$1;
#X msg 463 93 setorder integer \$1;
#X obj 290 73 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X obj 463 73 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X text 52 221 expose with options;
#X obj 53 273 s server;
#X msg 53 242 expose f g1 g2 sensor @min 0 @max 10 @order 3 @readonly;
#X connect 0 0 1 0;
#X connect 3 0 1 0;
#X connect 4 0 5 0;
#X connect 7 0 5 0;
#X connect 8 0 5 0;
#X connect 9 0 7 0;
#X connect 10 0 8 0;
#X connect 13 0 12 0;
#X restore 487 279 pd parameter-options;
#X text 455 309 -->;
#X obj 117 495 print server_info;
#X text 14 9 RabbitControl for Pd;
#X obj 47 39 rcp.server;
#X text 136 39 - rcp server;
#X text 22 623 see also:;
#X obj 100 622 rcp.client;
#X text 47 73 Rabbitcontrol allows you to expose values (parameters) to be controlled by a remote system in an easy way. rcp-clients receive the exposed parameters and can control their values.;
#N canvas 103 63 930 562 parameter-types 0;
#X obj 103 477 s server;
#X msg 115 270 expose i integer;
#X msg 127 302 expose t toggle;
#X msg 139 334 expose s mysymbol;
#X msg 151 366 expose b mybang;
#X msg 103 238 expose f sensor1;
#X text 27 83 types:;
#X text 37 102 f: float;
#X text 37 119 i: integer;
#X text 37 137 t: toggle (a boolean);
#X text 37 155 s: symbol (a string);
#X text 37 173 b: bang;
#X text 27 48 expose <type> <group1> <group2> ... <label>;
#X obj 436 315 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X msg 436 335 toggle \$1;
#X msg 453 373 mysymbol test;
#X floatatom 393 204 5 0 0 0 - - - 0;
#X msg 410 282 integer \$1;
#X floatatom 410 261 5 0 0 0 - - - 0;
#X msg 453 395 mysymbol test\ 123;
#X msg 393 226 sensor1 \$1;
#X msg 472 436 mybang;
#X text 389 180 set value;
#X obj 393 477 s server;
#X text 26 25 expose parameters - types;
#X msg 696 270 remove integer;
#X msg 706 302 remove toggle;
#X msg 716 334 remove mysymbol;
#X msg 726 366 remove mybang;
#X obj 686 477 s server;
#X msg 686 238 remove sensor1;
#X text 682 206 remove parameter;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 0 0;
#X connect 13 0 14 0;
#X connect 14 0 23 0;
#X connect 15 0 23 0;
#X connect 16 0 20 0;
#X connect 17 0 23 0;
#X connect 18 0 17 0;
#X connect 19 0 23 0;
#X connect 20 0 23 0;
#X connect 21 0 23 0;
#X connect 25 0 29 0;
#X connect 26 0 29 0;
#X connect 27 0 29 0;
#X connect 28 0 29 0;
#X connect 30 0 29 0;
#X restore 488 219 pd parameter-types;
#X msg 87 278 expose f sensor;
#X msg 106 349 sensor \$1;
#X msg 125 400 remove sensor;
#X text 457 220 -->;
#X text 487 189 more about parameters;
#X text 194 451 server information;
#X text 47 142 (1) start listening;
#X text 85 259 (2) expose a parameter;
#X text 104 307 (3) set value;
#X text 384 505 (4) open the webclient and connect to localhost:100000;
#X obj 50 569 print rcp_server;
#N canvas 49 85 509 450 raw 0;
#X obj 121 239 rcp.server -raw;
#X msg 44 153 expose f sensor;
#X floatatom 146 367 5 0 0 0 - - - 0;
#X text 187 367 parameter id;
#X floatatom 172 344 5 0 0 0 - - - 0;
#X text 212 344 number of connected clients;
#X obj 197 319 print server_info;
#X obj 121 393 print rcp_server;
#X msg 121 202 sensor \$1;
#X floatatom 121 181 5 0 0 0 - - - 0;
#N canvas 131 166 431 343 sender 0;
#X obj 63 284 netsend -u -b;
#X obj 245 64 list prepend connect;
#X obj 63 133 list prepend send;
#X obj 220 109 list;
#X obj 40 76 t b a b;
#X msg 40 212 disconnect;
#X obj 220 133 list trim;
#X obj 63 159 list trim;
#X obj 40 22 inlet;
#X obj 245 22 inlet;
#X text 167 285 binary udp sender;
#X connect 1 0 3 1;
#X connect 2 0 7 0;
#X connect 3 0 6 0;
#X connect 4 0 5 0;
#X connect 4 1 2 0;
#X connect 4 2 3 0;
#X connect 5 0 0 0;
#X connect 6 0 0 0;
#X connect 7 0 0 0;
#X connect 8 0 4 0;
#X connect 9 0 1 0;
#X restore 223 272 pd sender;
#X text 222 180 binary udp receiver (output from);
#X obj 44 125 loadbang;
#X obj 223 202 netreceive -u -b -f 12002;
#X text 43 22 Usind the -raw flag allows you to handle network traffic yourself. Another input and output are created for raw data-input and data-output. Feed the server with a list of binary data and send the data rcp.server provides on the data-output port:;
#X connect 0 0 7 0;
#X connect 0 1 2 0;
#X connect 0 2 4 0;
#X connect 0 3 6 0;
#X connect 0 4 10 0;
#X connect 1 0 0 0;
#X connect 8 0 0 0;
#X connect 9 0 8 0;
#X connect 12 0 1 0;
#X connect 13 0 0 1;
#X connect 13 1 10 1;
#X restore 487 389 pd raw;
#X text 455 389 -->;
#X connect 0 0 46 0;
#X connect 0 1 3 0;
#X connect 0 2 5 0;
#X connect 0 3 28 0;
#X connect 1 0 0 0;
#X connect 2 0 37 0;
#X connect 7 0 0 0;
#X connect 12 0 11 0;
#X connect 13 0 11 0;
#X connect 16 0 0 0;
#X connect 21 0 0 0;
#X connect 22 0 0 0;
#X connect 36 0 0 0;
#X connect 37 0 0 0;
#X connect 38 0 0 0;
